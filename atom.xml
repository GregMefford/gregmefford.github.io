<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[acts_as_engineer]]></title>
  <link href="http://www.gregmefford.com/atom.xml" rel="self"/>
  <link href="http://www.gregmefford.com/"/>
  <updated>2014-09-24T22:30:43-04:00</updated>
  <id>http://www.gregmefford.com/</id>
  <author>
    <name><![CDATA[Greg Mefford]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Analyzing Cisco ASA Firewall Logs with Logstash]]></title>
    <link href="http://www.gregmefford.com/blog/2014/09/24/analyzing-cisco-asa-firewall-logs-with-logstash/"/>
    <updated>2014-09-24T22:32:01-04:00</updated>
    <id>http://www.gregmefford.com/blog/2014/09/24/analyzing-cisco-asa-firewall-logs-with-logstash</id>
    <content type="html"><![CDATA[<p>A year ago, I had a need to collect, analyze, and archive firewall logs from several Cisco ASA appliances.
The problem with Cisco&rsquo;s ASA syslog format is that each type of message is a special snowflake, apparently designed for human consumption rather than machine parsing.
The obvious solution was, of course, to use what is now know as <a href="http://www.elasticsearch.org/overview/">the ELK stack</a>: ElasticSearch, Logstash, and Kibana.
In this article, I&rsquo;ll walk through the process I used to tackle this problem, ending with a full configuration file that you can use in your environment.</p>

<!-- more -->


<h2>TL;DR</h2>

<p>If you&rsquo;re interested in the details about how this configuration was developed, read more below.
If you&rsquo;re just here for the final configuration file, here it is.
Unfortunately, there&rsquo;s not a <a href="http://pygments.org/">Pygments</a> lexer to provide syntax-highlighting for the Logstash config file format yet, but that&rsquo;s a <a href="http://en.wiktionary.org/wiki/yak_shaving">yak to be shaved</a> another day.</p>

<figure class='code'><figcaption><span>cisco-asa.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>input {
</span><span class='line'>  # Receive Cisco ASA logs on the standard syslog UDP port 514
</span><span class='line'>  udp {
</span><span class='line'>    port =&gt; 514
</span><span class='line'>    type =&gt; &quot;cisco-asa&quot;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>filter {
</span><span class='line'>  if type == &quot;cisco-asa&quot; {
</span><span class='line'>    # Split the syslog part and Cisco tag out of the message
</span><span class='line'>    grok {
</span><span class='line'>      match =&gt; [&quot;message&quot;, &quot;%{CISCO_TAGGED_SYSLOG} %{GREEDYDATA:cisco_message}&quot;]
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # Parse the syslog severity and facility
</span><span class='line'>    syslog_pri { }
</span><span class='line'>
</span><span class='line'>    # Parse the date from the &quot;timestamp&quot; field to the &quot;@timestamp&quot; field
</span><span class='line'>    date {
</span><span class='line'>      match =&gt; [&quot;timestamp&quot;,
</span><span class='line'>        &quot;MMM dd HH:mm:ss&quot;,
</span><span class='line'>        &quot;MMM  d HH:mm:ss&quot;,
</span><span class='line'>        &quot;MMM dd yyyy HH:mm:ss&quot;,
</span><span class='line'>        &quot;MMM  d yyyy HH:mm:ss&quot;
</span><span class='line'>      ]
</span><span class='line'>      timezone =&gt; &quot;America/New_York&quot;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # Clean up redundant fields if parsing was successful
</span><span class='line'>    if &quot;_grokparsefailure&quot; not in [tags] {
</span><span class='line'>      mutate {
</span><span class='line'>        rename =&gt; [&quot;cisco_message&quot;, &quot;message&quot;]
</span><span class='line'>        remove_field =&gt; [&quot;timestamp&quot;]
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # Extract fields from the each of the detailed message types
</span><span class='line'>    # The patterns provided below are included in Logstash since 1.2.0
</span><span class='line'>    grok {
</span><span class='line'>      match =&gt; [
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW106001}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW106006_106007_106010}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW106014}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW106015}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW106021}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW106023}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW106100}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW110002}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW302010}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW302013_302014_302015_302016}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW302020_302021}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW305011}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW313001_313004_313008}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW313005}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW402117}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW402119}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW419001}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW419002}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW500004}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW602303_602304}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW710001_710002_710003_710005_710006}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW713172}&quot;,
</span><span class='line'>        &quot;message&quot;, &quot;%{CISCOFW733100}&quot;
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output {
</span><span class='line'>  # Archive Cisco ASA firewall logs on disk based on the event&#39;s timestamp
</span><span class='line'>  # Results in directories for each year and month, with conveniently-named log files, like:
</span><span class='line'>  # /path/to/archive/cisco-asa/2014/2014-09/cisco-asa-2014-09-24.log
</span><span class='line'>  file {
</span><span class='line'>    path =&gt; &quot;/path/to/archive/%{type}/%{+YYYY}/%{+YYYY-MM}/%{type}-%{+YYYY-MM-dd}.log&quot;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  # Also output to ElasticSearch for review in Kibana
</span><span class='line'>  elasticsearch_http { host =&gt; &quot;elasticsearch-server-name&quot; }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Surely This is a Solved Problem</h2>

<p>After doing some Google searches, I found that several people were trying to do this with varying levels of success, but no one had yet documented even an 80% solution.
The best I could find was <a href="https://gist.github.com/dav3860/5345656">a gist by dav3860</a>, which gave me a great start on how to parse some of the <a href="http://www.cisco.com/en/US/docs/security/asa/syslog-guide/logmsgs.html">many, many Cisco ASA syslog message formats</a>.
Unfortunately, this gist didn&rsquo;t cover many of the message formats that I wanted to analyze from my environment and didn&rsquo;t capture all of the available data fields from the messages.
Seeing that there was demand for it on the mailing list and no one else seemed to have a good solution, I decided to figure it out myself and contribute the result back to the community.</p>

<h2>Stand Back, I Know Regular Expressions</h2>

<p>I started by collecting a large-ish sample of about half a million events from my production environment.
The ASA Device Manager (ASDM) software made this process pretty easy, if a bit tedious, by providing a file manager to download the log files from its internal Flash memory.
This allowed me to iteratively develop Grok expression against a known corpus of data.
When I hit an edge-case that failed to parse for some reason, I could tweak the expression and try again with the same input.</p>

<p>If you&rsquo;re here trying to figure out how to parse your Cisco ASA logs, you&rsquo;ve probably already seen what they look like.
In case you haven&rsquo;t, and for the sake of discussion, here&rsquo;s a little taste (obviously contrived and anonymized):</p>

<figure class='code'><figcaption><span>cisco-asa.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;134&gt;Sep 02 2014 11:50:10: %ASA-6-302013: Built inbound TCP connection 123456789 for inside:10.0.1.1/1234 (10.0.1.1/1234) to outside:10.0.2.2/80 (10.0.2.2/80)
</span><span class='line'>&lt;134&gt;Sep 02 2014 11:50:10: %ASA-6-302014: Teardown TCP connection 123456789 for inside:10.0.1.1/1234 to outside:10.0.2.2/80 duration 0:00:00 bytes 420 TCP FINs
</span><span class='line'>&lt;134&gt;Sep 02 2014 11:50:15: %ASA-6-106015: Deny TCP (no connection) from 10.0.1.1/4567 to 10.0.3.3/80 flags FIN ACK  on interface inside
</span><span class='line'>&lt;163&gt;Sep 02 2014 11:50:25: %ASA-3-710003: TCP access denied by ACL from 10.0.4.4/6666 to outside:10.0.1.1/22
</span></code></pre></td></tr></table></div></figure>


<p>Just from peering dubiously at these logs for a minute, I was able to divine a few things:</p>

<ul>
<li>There&rsquo;s a &ldquo;standard&rdquo; syslog prefix at the beginning with a severity code and a timestamp.</li>
<li>The timestamp is in some random format, and it&rsquo;s in local time instead of UTC. ::sigh::</li>
<li>There&rsquo;s some kind of Cisco proprietary code at the beginning that I&rsquo;m going to call a <code>ciscotag</code> for want of a better name.</li>
<li>After the <code>ciscotag</code>, there&rsquo;s a human-readable message containing the meat and potatoes that we want to parse.</li>
</ul>


<p>With a little <a href="http://logstash.net/docs/latest/filters/grok">Grok-fu</a>, I was able to build the following patterns file to match the beginning part of the messages:</p>

<figure class='code'><figcaption><span>patterns/patterns.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>CISCO_TAGGED_SYSLOG ^&lt;%{POSINT:syslog_pri}&gt;%{CISCOTIMESTAMP:timestamp}( %{SYSLOGHOST:sysloghost})?: %%{CISCOTAG:ciscotag}:
</span><span class='line'>CISCOTIMESTAMP %{MONTH} +%{MONTHDAY}(?: %{YEAR})? %{TIME}
</span><span class='line'>CISCOTAG [A-Z0-9]+-%{INT}-(?:[A-Z0-9_]+)
</span></code></pre></td></tr></table></div></figure>


<p>The keen-eyed reader will notice that these patterns don&rsquo;t match my logs identically.
For example, my logs don&rsquo;t have a <code>SYSLOGHOST</code>, and I have the <code>YEAR</code> marked as optional even though it&rsquo;s there in my logs.
Based on feedback from other people who tried to use my patterns, I learned that the ASA syslog output can vary based on firmware version and some config settings.
The awesome power of Grok patterns is that it&rsquo;s pretty easy to tweak them to work flexibly for everyone without making a tangled mess.</p>

<h2>Now We&rsquo;re Getting Somewhere</h2>

<p>At this point, we have enough to actually run the ELK stack to guide the rest of the development.
The following is a simple &ldquo;test fixture&rdquo; setup that I found useful during this process.
I&rsquo;m going to assume that you&rsquo;re trying to accomplish this task using a Windows machine, but it&rsquo;s pretty easy to tell how the same would work in Bash.
Let&rsquo;s be honest; there are too few tutorials that help people be productive with tools like this on Windows.</p>

<p>First, download <a href="https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.zip">the latest Logstash core zip file (currently 1.4.2)</a> and unpack it somewhere convenient.</p>

<p>Then create a configuration file called <code>logstash.conf</code> and a batch file called <code>run_logstash.bat</code> containing the following:</p>

<figure class='code'><figcaption><span>logstash.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>input {
</span><span class='line'>  stdin { }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>filter {
</span><span class='line'>  grok {
</span><span class='line'>    patterns_dir =&gt; &quot;.\patterns\&quot; # The directory containing the patterns file mentioned above
</span><span class='line'>    match =&gt; [&quot;message&quot;, &quot;%{CISCO_TAGGED_SYSLOG} %{GREEDYDATA:cisco_message}&quot;]
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  date {
</span><span class='line'>    match =&gt; [&quot;timestamp&quot;,
</span><span class='line'>      &quot;MMM dd HH:mm:ss&quot;,
</span><span class='line'>      &quot;MMM  d HH:mm:ss&quot;,
</span><span class='line'>      &quot;MMM dd yyyy HH:mm:ss&quot;,
</span><span class='line'>      &quot;MMM  d yyyy HH:mm:ss&quot;
</span><span class='line'>    ]
</span><span class='line'>    timezone =&gt; &quot;America/New_York&quot;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  syslog_pri { }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output {
</span><span class='line'>  stdout { codec =&gt; &quot;rubydebug&quot; }
</span><span class='line'>  if &quot;_grokparsefailure&quot; in [tags] {
</span><span class='line'>    file {
</span><span class='line'>      path =&gt; &quot;./failure.json&quot;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  else {
</span><span class='line'>    file {
</span><span class='line'>      path =&gt; &quot;./success_%{ciscotag}.json&quot;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>run_logstash.bat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>logstash<span class="m">-1</span>.<span class="m">4</span>.<span class="m">2</span>\bin\logstash.bat agent -f logstash.conf
</span></code></pre></td></tr></table></div></figure>


<p>When you execute <code>run_logstash.bat</code>, Logstash will fire up and wait for input on <code>STDIN</code>.
When you paste a set of events into the console, they will be processed and the results displayed on the screen as well as being appended to the specified files.</p>

<p>I had a big sample of event data that I had collected, so it resulted in a bunch of <code>success_&lt;something&gt;.json</code> files of varying sizes.
Each of these files contained the JSON-ified version of each event.
For example, the following would show up on the console, with the same being appended to the <code>success_ASA-3-710003.json</code> file (except on one line per event):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">{</span>
</span><span class='line'><span class="go">                 &quot;message&quot; =&gt; &quot;&lt;134&gt;Sep 02 2014 11:50:10: %ASA-6-302013: Built inbound TCP connection 123456789 for inside:10.0.1.1/1234 (10.0.1.1/1234) to outside:10.0.2.2/80 (10.0.2.2/80)\r&quot;,</span>
</span><span class='line'><span class="go">                &quot;@version&quot; =&gt; &quot;1&quot;,</span>
</span><span class='line'><span class="go">              &quot;@timestamp&quot; =&gt; &quot;2014-09-02T15:50:10.000Z&quot;,</span>
</span><span class='line'><span class="go">                    &quot;host&quot; =&gt; &quot;Forklift&quot;,</span>
</span><span class='line'><span class="go">              &quot;syslog_pri&quot; =&gt; &quot;134&quot;,</span>
</span><span class='line'><span class="go">               &quot;timestamp&quot; =&gt; &quot;Sep 02 2014 11:50:10&quot;,</span>
</span><span class='line'><span class="go">                &quot;ciscotag&quot; =&gt; &quot;ASA-6-302013&quot;,</span>
</span><span class='line'><span class="go">           &quot;cisco_message&quot; =&gt; &quot;Built inbound TCP connection 123456789 for inside:10.0.1.1/1234 (10.0.1.1/1234) to outside:10.0.2.2/80 (10.0.2.2/80)\r&quot;,</span>
</span><span class='line'><span class="go">    &quot;syslog_severity_code&quot; =&gt; 6,</span>
</span><span class='line'><span class="go">    &quot;syslog_facility_code&quot; =&gt; 16,</span>
</span><span class='line'><span class="go">         &quot;syslog_facility&quot; =&gt; &quot;local0&quot;,</span>
</span><span class='line'><span class="go">         &quot;syslog_severity&quot; =&gt; &quot;informational&quot;</span>
</span><span class='line'><span class="go">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at the relative sizes of the resulting files, I could make inferences about the log volume of each type, allowing me to prioritize which patterns to focus on first.
The <code>ASA-6-302013</code> event is logged whenever a connection is successfully established across the firewall, so that tends to be pretty frequent.
By adding the following Grok filter to the filter list, I was able to easily parse out all of the relevant fields:</p>

<figure class='code'><figcaption><span>logstash.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># ...
</span><span class='line'>filter {
</span><span class='line'>  # ...
</span><span class='line'>
</span><span class='line'>  syslog_pri { }
</span><span class='line'>
</span><span class='line'>  grok {
</span><span class='line'>    match =&gt; [
</span><span class='line'>      &quot;cisco_message&quot;,
</span><span class='line'>      &quot;Built inbound TCP connection %{INT:connection_id} for %{DATA:src_interface}:%{IP:src_ip}/%{INT:src_port}( \(%{IP:src_mapped_ip}/%{INT:src_mapped_port}\))? to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port}( \(%{IP:dst_mapped_ip}/%{INT:dst_mapped_port}\))?&quot;
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'># ...
</span></code></pre></td></tr></table></div></figure>


<p>Which results in the following magical output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">{</span>
</span><span class='line'><span class="go">                 &quot;message&quot; =&gt; &quot;&lt;134&gt;Sep 02 2014 11:50:10: %ASA-6-302013: Built inbound TCP connection 123456789 for inside:10.0.1.1/1234 (10.0.1.1/1234) to outside:10.0.2.2/80 (10.0.2.2/80)\r&quot;,</span>
</span><span class='line'><span class="go">                &quot;@version&quot; =&gt; &quot;1&quot;,</span>
</span><span class='line'><span class="go">              &quot;@timestamp&quot; =&gt; &quot;2014-09-02T15:50:10.000Z&quot;,</span>
</span><span class='line'><span class="go">                    &quot;host&quot; =&gt; &quot;Forklift&quot;,</span>
</span><span class='line'><span class="go">              &quot;syslog_pri&quot; =&gt; &quot;134&quot;,</span>
</span><span class='line'><span class="go">               &quot;timestamp&quot; =&gt; &quot;Sep 02 2014 11:50:10&quot;,</span>
</span><span class='line'><span class="go">                &quot;ciscotag&quot; =&gt; &quot;ASA-6-302013&quot;,</span>
</span><span class='line'><span class="go">           &quot;cisco_message&quot; =&gt; &quot;Built inbound TCP connection 123456789 for inside:10.0.1.1/1234 (10.0.1.1/1234) to outside:10.0.2.2/80 (10.0.2.2/80)\r&quot;,</span>
</span><span class='line'><span class="go">    &quot;syslog_severity_code&quot; =&gt; 6,</span>
</span><span class='line'><span class="go">    &quot;syslog_facility_code&quot; =&gt; 16,</span>
</span><span class='line'><span class="go">         &quot;syslog_facility&quot; =&gt; &quot;local0&quot;,</span>
</span><span class='line'><span class="go">         &quot;syslog_severity&quot; =&gt; &quot;informational&quot;,</span>
</span><span class='line'><span class="go">           &quot;connection_id&quot; =&gt; &quot;123456789&quot;,</span>
</span><span class='line'><span class="go">           &quot;src_interface&quot; =&gt; &quot;inside&quot;,</span>
</span><span class='line'><span class="go">                  &quot;src_ip&quot; =&gt; &quot;10.0.1.1&quot;,</span>
</span><span class='line'><span class="go">                &quot;src_port&quot; =&gt; &quot;1234&quot;,</span>
</span><span class='line'><span class="go">           &quot;src_mapped_ip&quot; =&gt; &quot;10.0.1.1&quot;,</span>
</span><span class='line'><span class="go">         &quot;src_mapped_port&quot; =&gt; &quot;1234&quot;,</span>
</span><span class='line'><span class="go">           &quot;dst_interface&quot; =&gt; &quot;outside&quot;,</span>
</span><span class='line'><span class="go">                  &quot;dst_ip&quot; =&gt; &quot;10.0.2.2&quot;,</span>
</span><span class='line'><span class="go">                &quot;dst_port&quot; =&gt; &quot;80&quot;,</span>
</span><span class='line'><span class="go">           &quot;dst_mapped_ip&quot; =&gt; &quot;10.0.2.2&quot;,</span>
</span><span class='line'><span class="go">         &quot;dst_mapped_port&quot; =&gt; &quot;80&quot;</span>
</span><span class='line'><span class="go">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After figuring out several such Grok patterns and consulting with the documentation, I discovered that many of the formats are pretty similar to one another.
For those, I broke out the common fragments from each message and combined the similar Grok expressions into a pattern file.
The format of the pattern file is the same as what would go in the <code>match</code> clause of the <code>grok</code> filter, except with an <code>ALL_CAPS_NAME</code> at the beginning of each line.</p>

<p>Here&rsquo;s a snippet of the resulting patterns file in all its complex glory, but only for the demo messages we&rsquo;re discussing here.
These patterns and a bunch more are already included in Logstash, so you won&rsquo;t need to include them in your own pattern files.
The power of Grok is that, though these patterns can get pretty hairy, they&rsquo;re reasonably understandable.
The fully-expanded regular expressions they represent are simply asburd and would be nearly impossible to change or maintain.</p>

<figure class='code'><figcaption><span>patterns/patterns.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#== Cisco ASA ==
</span><span class='line'>CISCO_TAGGED_SYSLOG ^&lt;%{POSINT:syslog_pri}&gt;%{CISCOTIMESTAMP:timestamp}( %{SYSLOGHOST:sysloghost})?: %%{CISCOTAG:ciscotag}:
</span><span class='line'>CISCOTIMESTAMP %{MONTH} +%{MONTHDAY}(?: %{YEAR})? %{TIME}
</span><span class='line'>CISCOTAG [A-Z0-9]+-%{INT}-(?:[A-Z0-9_]+)
</span><span class='line'>
</span><span class='line'># Common Particles
</span><span class='line'>CISCO_ACTION Built|Teardown|Deny|Denied|denied|requested|permitted|denied by ACL|discarded|est-allowed|Dropping|created|deleted
</span><span class='line'>CISCO_REASON Duplicate TCP SYN|Failed to locate egress interface|Invalid transport field|No matching connection|DNS Response|DNS Query|(?:%{WORD}\s*)*
</span><span class='line'>CISCO_DIRECTION Inbound|inbound|Outbound|outbound
</span><span class='line'>
</span><span class='line'># ASA-6-106015
</span><span class='line'>CISCOFW106015 %{CISCO_ACTION:action} %{WORD:protocol} \(%{DATA:policy_id}\) from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} flags %{DATA:tcp_flags}  on interface %{GREEDYDATA:interface}
</span><span class='line'>
</span><span class='line'># ASA-6-302013, ASA-6-302014, ASA-6-302015, ASA-6-302016
</span><span class='line'>CISCOFW302013_302014_302015_302016 %{CISCO_ACTION:action}(?: %{CISCO_DIRECTION:direction})? %{WORD:protocol} connection %{INT:connection_id} for %{DATA:src_interface}:%{IP:src_ip}/%{INT:src_port}( \(%{IP:src_mapped_ip}/%{INT:src_mapped_port}\))?(\(%{DATA:src_fwuser}\))? to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port}( \(%{IP:dst_mapped_ip}/%{INT:dst_mapped_port}\))?(\(%{DATA:dst_fwuser}\))?( duration %{TIME:duration} bytes %{INT:bytes})?(?: %{CISCO_REASON:reason})?( \(%{DATA:user}\))?
</span><span class='line'>
</span><span class='line'># ASA-7-710001, ASA-7-710002, ASA-7-710003, ASA-7-710005, ASA-7-710006
</span><span class='line'>CISCOFW710001_710002_710003_710005_710006 %{WORD:protocol} (?:request|access) %{CISCO_ACTION:action} from %{IP:src_ip}/%{INT:src_port} to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port}
</span><span class='line'>
</span><span class='line'>#== End Cisco ASA ==
</span></code></pre></td></tr></table></div></figure>


<p>Now we can use the pattern file to extract the complexity from the <code>logstash.conf</code> configuration file.
The previous configuration snippet can now be replaced by this one:</p>

<figure class='code'><figcaption><span>logstash.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># ...
</span><span class='line'>filter {
</span><span class='line'>  # ...
</span><span class='line'>
</span><span class='line'>  syslog_pri { }
</span><span class='line'>
</span><span class='line'>  grok {
</span><span class='line'>    patterns_dir =&gt; &quot;./patterns/&quot;
</span><span class='line'>    match =&gt; [
</span><span class='line'>      &quot;cisco_message&quot;, &quot;%{CISCOFW106015}&quot;,
</span><span class='line'>      &quot;cisco_message&quot;, &quot;%{CISCOFW302013_302014_302015_302016}&quot;,
</span><span class='line'>      &quot;cisco_message&quot;, &quot;%{CISCOFW710001_710002_710003_710005_710006}&quot;,
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>This results in the same output as above, only now the Grok filter will try to match against each of the requested patterns until one of them succeeds.</p>

<p>From this point, it just took additional slogging through the various event formats, documentation, and real-world example data until I had most of what I wanted.
If you&rsquo;re curious about what message formats are available in the Logstash distribution today, <a href="https://github.com/elasticsearch/logstash/blob/master/patterns/firewalls">this</a> source file contains them.</p>

<p>I have tried to consolidate the field names that are parsed out of the messages to make the Kibana dashboard-creation process more straightforward.
For example, if a message is talking about the disposition of a connection in some way, I parse that out as the <code>action</code> field even though the Cisco documentation doesn&rsquo;t call it an &ldquo;action.&rdquo;
This allows you to easily create a Kibana dashboard showing a table or graph summarizing the values of the <code>action</code> field, like <code>denied</code>, <code>permitted</code>, or <code>discarded</code>.</p>

<h2>Cleaning Up</h2>

<p>What&rsquo;s still missing is the final polish.
You may notice that there are some redundant fields that are going to end up wasting space in the database where these events will ultimately live.
For example, <code>timestamp</code> and <code>@timestamp</code> contain the same information expressed two different ways.
<code>timestamp</code> is the Cisco format that was parsed out of the message, and <code>@timestamp</code> is Logstash&rsquo;s internal representation in ISO8601 format that results from the <code>date</code> filter.
Also, the <code>message</code> field becomes redundant once it has been parsed into its constituent parts.
I find that, while we don&rsquo;t need to keep both <code>message</code> and <code>cisco_message</code>, it is worth keeping the content of the smaller <code>cisco_message</code> field rather than just the constituent fields.
This allows easier troubleshooting of the Grok parsing if there&rsquo;s a strange edge-case or dumping out the full text of the log lines to a file to show someone outside of Kibana.</p>

<p>We can very easily strip out the redundant fields, making sure to only truncate data that was successfully parsed, using a <code>mutate</code> filter:</p>

<figure class='code'><figcaption><span>logstash.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># ...
</span><span class='line'>
</span><span class='line'>filter {
</span><span class='line'>  # ...
</span><span class='line'>
</span><span class='line'>  # Clean up redundant fields if parsing was successful
</span><span class='line'>  if &quot;_grokparsefailure&quot; not in [tags] {
</span><span class='line'>    mutate {
</span><span class='line'>      rename =&gt; [&quot;cisco_message&quot;, &quot;message&quot;]
</span><span class='line'>      remove_field =&gt; [&quot;timestamp&quot;]
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  # ...
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'># ...
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s also a good idea to design the pieces of your Logstash configuration to play nicely with each other as you add more log sources and destinations.
One common way to do this is the apply a <code>type</code> to the event at the input, then process it accordingly using conditionals, like so:</p>

<figure class='code'><figcaption><span>logstash.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>input {
</span><span class='line'>  # Receive Cisco ASA logs on the standard syslog UDP port 514
</span><span class='line'>  udp {
</span><span class='line'>    port =&gt; 514
</span><span class='line'>    type =&gt; &quot;cisco-asa&quot;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>filter {
</span><span class='line'>  if type == &quot;cisco-asa&quot; {
</span><span class='line'>    # Put your ASA-specific Grok, Date, and Mutate filters here
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output {
</span><span class='line'>  # Archive Cisco ASA firewall logs on disk based on the event&#39;s timestamp
</span><span class='line'>  # Results in directories for each year and month, with conveniently-named log files, like:
</span><span class='line'>  # /path/to/archive/cisco-asa/2014/2014-09/cisco-asa-2014-09-24.log
</span><span class='line'>  file {
</span><span class='line'>    path =&gt; &quot;/path/to/archive/%{type}/%{+YYYY}/%{+YYYY-MM}/%{type}-%{+YYYY-MM-dd}.log&quot;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  # Also output to ElasticSearch for review in Kibana
</span><span class='line'>  elasticsearch_http { host =&gt; &quot;elasticsearch-server-name&quot; }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Putting all the pieces together, you get the configuration listed in the TL;DR section at the top of the post!
The result is that you have taken &ldquo;human-readable&rdquo; logs from your firewall, transformed them into what&rsquo;s known as &ldquo;structured&rdquo; logs, and stored them for later review.</p>

<p>In my next post, I will show how that review process might look by going through the steps to create exploratory dashboards in Kibana.
Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: The Passionate Programmer]]></title>
    <link href="http://www.gregmefford.com/blog/2011/02/06/review-the-passionate-programmer/"/>
    <updated>2011-02-06T22:31:00-05:00</updated>
    <id>http://www.gregmefford.com/blog/2011/02/06/review-the-passionate-programmer</id>
    <content type="html"><![CDATA[<p>This afternoon, I finished <a href="http://twitter.com/chadfowler">@chadfowler</a>&rsquo;s <a href="http://amzn.com/1934356344"><a href="http://amzn.com/1934356344">The Passionate Programmer</a>.
One of my favorite books is <a href="http://amzn.com/020161622X">The Pragmatic Programmer</a>, so the similar title of this book (and the author, who I follow on <a href="http://twitter.com/ferggo">Twitter</a>) caught my eye.
I read a lot of hype about it leading up to its release and I was not disappointed!
Besides echoing <a href="http://illusional-mind.blogspot.com/2011/02/chad-fowler-passionate-programmer.html">many</a> <a href="http://elegantcode.com/2009/11/29/review-the-passionate-programmer/">other</a> <a href="http://vodra.wordpress.com/2011/01/11/book-review-the-passionate-programmer-by-chad-fowler/">reviewers&#8217;</a> <a href="http://suhinini.blogspot.com/2010/01/book-review-passionate-programmer-by.html">exhortation</a> to go pick up the book and read it if you care about your career, I thought it would be valuable to capture in text some of my thoughts, gathered while reading this book.</p>

<!-- more -->


<h2>Why You Should Read This Book</h2>

<p>The reason I ordered this book in the first place is that I am passionate about software development and about making the most of my career in technology.
This book is both inspirational and pragmatic (as the name of the publisher would imply).
Each chapter is a bite-sized discussion of a single aspect of improving yourself as a contributing member of the industry.
At the end of each chapter, there is an &ldquo;Act On It!&rdquo; section that gives some concrete things I can think about or do today to be better at what I do.
If you really care about what you do, read this book.
Even if what you do isn&rsquo;t software development, there is a lot of value here for everyone.</p>

<h2>What I Got Out of It</h2>

<h3>Things I was already doing that were validated:</h3>

<ul>
<li>Participating in Open Source (Reading others&#8217; code and contributing my own)</li>
<li>Striving to only work 40 hours per week</li>
<li>Practicing my craft outside of business hours</li>
<li>Exploring the bleeding edge of tomorrow&rsquo;s hot technologies</li>
</ul>


<h3>Things I immediately started doing after reading about them:</h3>

<ul>
<li>Learning more about how the business really works (what impacts the bottom-line?)</li>
<li>Practice writing more (here I am writing a blog post after far too long)</li>
<li>Recording commitments and tracking them to completion</li>
</ul>


<h3>Things I have been putting off that I&rsquo;m going to really start doing</h3>

<ul>
<li>Learn by teaching</li>
<li>&ldquo;Be the worst&rdquo; by striving to work with the best</li>
<li>Go deeper into understanding the technologies I use</li>
<li>Use this blog as a capture-point for research to remind my future self</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Signal Processing with R]]></title>
    <link href="http://www.gregmefford.com/blog/2010/06/25/signal-processing-with-r/"/>
    <updated>2010-06-25T14:40:39-04:00</updated>
    <id>http://www.gregmefford.com/blog/2010/06/25/signal-processing-with-r</id>
    <content type="html"><![CDATA[<p>I have been meaning to check out <a href="http://www.r-project.org/">R</a> for a few years now, but I got busy and I just never got around to doing much more than installing the MacOS X version on my laptop.
I finally got my excuse to try it when I needed to start working on signal processing of the measurements I had been gathering.
My usual go-to tool for this type of task was <a href="http://www.mathworks.com/">MATLAB</a>.
However, on this fateful day, when I tried to launch my copy of MATLAB, I got some kind of message saying that I needed to renew my license.
At some point in the past, I had bought a one-year student edition of MATLAB, so this wasn&rsquo;t a huge surprise.
However, that message was all it took to get me to finally check out R.</p>

<!-- more -->


<h2>What is R?</h2>

<p>Despite its rather silly name, R is a phenominal piece of software for analyzing data and generating high-quality charts and graphs.
It has a great user community, extensions to support just about any kind of data analysis you can think of, and best of all, it&rsquo;s free (as in &ldquo;free beer&rdquo; as well as &ldquo;free speech&rdquo;).
R offers a variety of functions for statistical analysis and signal processing of large data sets.</p>

<h2>Problem Description</h2>

<p>The data set to be analyzed is a set of measurements from an oscilloscope.
Each measurement represents a trace of the same analog signal, but they are not time-aligned and each has a considerable amount of noise.
The goal of this experiment is to time-align these data samples and perform some statistical analysis on them to pull some kind of signal out of the noise.</p>

<h2>Loading the Data</h2>

<p>The first task in any data-processing pipeline is the mundane step of importing the raw data from the data source into the data processing tool.
In this case, the data source is the Agilent oscilloscope being used to gather the measurements by converting the continuous-time analog signal of interest into a series of digital samples with 8 bits of resolution.
The wave forms are saved in &ldquo;segmented time&rdquo; mode so that multiple traces can be acquired in the oscilloscope before performing the alignment and statistical analysis.
These segmented time acquisitions are saved as a tab-delimited file with a tabular structure.
Each column of data represents a memory segment, which is a single trace.
Each trace consists of approximately 25,000 samples, stored as rows in the data file.</p>

<p>To load this type of data file into R and convert a trace into a time series for plotting and manipulation, the process is very straightforward:</p>

<figure class='code'><figcaption><span>Reading a CSV file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>traces <span class="o">&lt;-</span> read.table<span class="p">(</span><span class="s">&quot;16traces.txt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It took me a while to figure out how to set up the margins on the plot, but it turns out to be simple once you find the proper command to set the graphics defaults.
<code>mar(bottom, left, top, right)</code> sets the margins around the plot, and <code>mgp(title, x, y)</code> sets the margin lines for the title and axes.</p>

<figure class='code'><figcaption><span>Formatting and Plotting a Time Series</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>par<span class="p">(</span>mar<span class="o">=</span>c<span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> mgp<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span> xaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">,</span> yaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>timeseries<span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Single Raw Trace&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Time&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;Current&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plotting to a PNG image is also possible, with the result following:</p>

<figure class='code'><figcaption><span>Plotting to a PNG Image File</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>png<span class="p">(</span><span class="s">&quot;single_raw_trace.png&quot;</span><span class="p">,</span> width<span class="o">=</span><span class="m">600</span><span class="p">,</span> height<span class="o">=</span><span class="m">200</span><span class="p">)</span>
</span><span class='line'>  par<span class="p">(</span>mar<span class="o">=</span>c<span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> mgp<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span> xaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">,</span> yaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">)</span>
</span><span class='line'>  plot<span class="p">(</span>timeseries<span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Single Raw Trace&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Time&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;Current&quot;</span><span class="p">)</span>
</span><span class='line'>dev.off<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://www.gregmefford.com/images/posts/2010-06-25-signal-processing-with-r/single_raw_trace.png" title="A single time-series measurement" ></p>

<h2>Simplifying the Data</h2>

<p>Now that we have the basics laid out, onward to some real work.</p>

<p>The first step needed to process the measurements is to smooth out the data to allow the lower-frequency features to be more visible.
To do this, I am going to use R&rsquo;s <code>lowess</code> function.
The best way to describe what this does is with an example:</p>

<figure class='code'><figcaption><span>Demonstrating Lowess Smoothing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>png<span class="p">(</span><span class="s">&quot;lowess_smoothing.png&quot;</span><span class="p">,</span> width<span class="o">=</span><span class="m">600</span><span class="p">,</span> height<span class="o">=</span><span class="m">200</span><span class="p">)</span>
</span><span class='line'>  par<span class="p">(</span>mar<span class="o">=</span>c<span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> mgp<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span> xaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">,</span> yaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">)</span>
</span><span class='line'>  plot<span class="p">(</span>timeseries<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;grey&quot;</span><span class="p">,</span>
</span><span class='line'>    main<span class="o">=</span><span class="s">&quot;Lowess Smoothing&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Time&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;Current&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  lines<span class="p">(</span>lowess<span class="p">(</span>timeseries<span class="p">,</span> f<span class="o">=</span><span class="m">.07</span><span class="p">))</span>
</span><span class='line'>dev.off<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://www.gregmefford.com/images/posts/2010-06-25-signal-processing-with-r/lowess_smoothing.png" title="Lowess Smoothing" ></p>

<h2>Alignment</h2>

<p>The next step is pure magic.</p>

<p>What we need to do is align each measurement trace collected so that corresponding features can be compared and analyzed.
The plan is to use R&rsquo;s <code>ccf</code> function, which plots the correlation between two functions vs. the lag between them.</p>

<figure class='code'><figcaption><span>Correlating Two Traces while Varying the Lag Between Signals</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>ts1.low <span class="o">=</span> lowess<span class="p">(</span>ts<span class="p">(</span>traces<span class="p">[</span><span class="o">&lt;</span>sup class<span class="o">=</span><span class="s">&quot;footnote&quot;</span><span class="o">&gt;&lt;</span>a href<span class="o">=</span><span class="s">&quot;#fn1&quot;</span><span class="o">&gt;</span><span class="m">1</span><span class="o">&lt;/</span>a<span class="o">&gt;&lt;/</span>sup<span class="o">&gt;</span><span class="p">]),</span> f<span class="o">=</span><span class="m">.07</span><span class="p">)</span>
</span><span class='line'>ts5.low <span class="o">=</span> lowess<span class="p">(</span>ts<span class="p">(</span>traces<span class="p">[</span><span class="o">&lt;</span>sup class<span class="o">=</span><span class="s">&quot;footnote&quot;</span><span class="o">&gt;&lt;</span>a href<span class="o">=</span><span class="s">&quot;#fn5&quot;</span><span class="o">&gt;</span><span class="m">5</span><span class="o">&lt;/</span>a<span class="o">&gt;&lt;/</span>sup<span class="o">&gt;</span><span class="p">]),</span> f<span class="o">=</span><span class="m">.07</span><span class="p">)</span>
</span><span class='line'>png<span class="p">(</span><span class="s">&quot;correlation_t1_t5.png&quot;</span><span class="p">,</span> width<span class="o">=</span><span class="m">600</span><span class="p">,</span> height<span class="o">=</span><span class="m">400</span><span class="p">)</span>
</span><span class='line'>  par<span class="p">(</span>mar<span class="o">=</span>c<span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> mgp<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">))</span>
</span><span class='line'>  plot<span class="p">(</span>
</span><span class='line'>    ccf<span class="p">(</span>ts1.low<span class="o">$</span>y<span class="p">,</span> ts5.low<span class="o">$</span>y<span class="p">,</span> lag.max<span class="o">=</span>length<span class="p">(</span>ts1<span class="p">)</span><span class="o">/</span><span class="m">2</span><span class="p">),</span>
</span><span class='line'>    main<span class="o">=</span><span class="s">&quot;Correlation: Trace 1 vs Trace 5&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Lag&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;Correlation&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>dev.off<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://www.gregmefford.com/images/posts/2010-06-25-signal-processing-with-r/correlation_t1_t5.png" title="Correlation: Trace 1 vs Trace 5" ></p>

<p>This plot is neat to look at, but what we really want is to find the absolute maximum of this function, which represents the offset that will cause the two traces to be aligned as well as possible.</p>

<figure class='code'><figcaption><span>Finding the Lag Value that Maximizes Correlation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>  results <span class="o">=</span> ccf<span class="p">(</span>ts1.low<span class="o">$</span>y<span class="p">,</span> ts5.low<span class="o">$</span>y<span class="p">,</span> lag.max<span class="o">=</span>length<span class="p">(</span>ts1<span class="p">)</span><span class="o">/</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>  results<span class="o">$</span>lag<span class="p">[</span>which.max<span class="p">(</span>results<span class="o">$</span>acf<span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The preceding code returns <code>536</code> for the data shown here, which passes the &ldquo;sniff-test&rdquo; according to the plot of the <code>ccf</code> function shown in the previous section.</p>

<p>If we lag the second plot using this amount, they should line up:</p>

<figure class='code'><figcaption><span>Plotting the Two Traces Using the Maximum-Correlation Lag Value</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>png<span class="p">(</span><span class="s">&quot;auto-aligned_traces.png&quot;</span><span class="p">,</span> width<span class="o">=</span><span class="m">600</span><span class="p">,</span> height<span class="o">=</span><span class="m">400</span><span class="p">)</span>
</span><span class='line'>  par<span class="p">(</span>mar<span class="o">=</span>c<span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> mgp<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span> xaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">,</span> yaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">)</span>
</span><span class='line'>  best_lag <span class="o">=</span> results<span class="o">$</span>lag<span class="p">[</span>which.max<span class="p">(</span>results<span class="o">$</span>acf<span class="p">)]</span>
</span><span class='line'>  ts1.lagged.low <span class="o">=</span> lowess<span class="p">(</span>lag<span class="p">(</span>ts1<span class="p">,</span> best_lag<span class="p">),</span> f<span class="o">=</span><span class="m">.07</span><span class="p">)</span>
</span><span class='line'>  plot<span class="p">(</span>ts1.lagged.low<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;grey&quot;</span><span class="p">,</span>
</span><span class='line'>    main<span class="o">=</span><span class="s">&quot;Auto-Aligned Traces&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Time&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;Current&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  lines<span class="p">(</span>ts5.low<span class="p">)</span>
</span><span class='line'>dev.off<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://www.gregmefford.com/images/posts/2010-06-25-signal-processing-with-r/auto-aligned_traces.png" title="Auto-Aligned Traces" ></p>

<p>This code starts to get pretty ugly, but the resulting figure shows just how nicely-aligned these features are, using a more fine-grained smoothing function to show a bit more detail:</p>

<figure class='code'><figcaption><span>Plotting the Aligned Traces with Less Smoothing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>png<span class="p">(</span><span class="s">&quot;hires_aligned_traces.png&quot;</span><span class="p">,</span> width<span class="o">=</span><span class="m">600</span><span class="p">,</span> height<span class="o">=</span><span class="m">200</span><span class="p">)</span>
</span><span class='line'>  par<span class="p">(</span>mar<span class="o">=</span>c<span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> mgp<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span> xaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">,</span> yaxt<span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">)</span>
</span><span class='line'>  ts1.low <span class="o">=</span> lowess<span class="p">(</span>ts1<span class="p">,</span> delta<span class="o">=</span><span class="m">10</span><span class="p">,</span> f<span class="o">=</span><span class="m">.01</span><span class="p">)</span>
</span><span class='line'>  ts5.low <span class="o">=</span> lowess<span class="p">(</span>ts5<span class="p">,</span> delta<span class="o">=</span><span class="m">10</span><span class="p">,</span> f<span class="o">=</span><span class="m">.01</span><span class="p">)</span>
</span><span class='line'>  ts1.aligned <span class="o">=</span> ts<span class="p">(</span>ts1.low<span class="o">$</span>y<span class="p">[</span>best_lag<span class="o">:</span>length<span class="p">(</span>ts1.lagged.low<span class="o">$</span>y<span class="p">)])</span>
</span><span class='line'>  ts5.aligned <span class="o">=</span> ts<span class="p">(</span>ts5.low<span class="o">$</span>y<span class="p">)</span>
</span><span class='line'>  plot<span class="p">(</span>ts1.aligned<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;grey&quot;</span><span class="p">,</span>
</span><span class='line'>    main<span class="o">=</span><span class="s">&quot;High-Resolution Auto-Aligned Traces&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Time&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;Current&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  lines<span class="p">(</span>ts5.aligned<span class="p">)</span>
</span><span class='line'>dev.off<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://www.gregmefford.com/images/posts/2010-06-25-signal-processing-with-r/hires_aligned_traces.png" title="High-Resolution Auto-Aligned Traces" ></p>

<p>That&rsquo;s all for now!
Coming up next time: cropping out just the interesting part of all the traces to build up a useful data set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVR, Meet Smart Card]]></title>
    <link href="http://www.gregmefford.com/blog/2010/06/05/avr-meet-smart-card/"/>
    <updated>2010-06-05T21:19:39-04:00</updated>
    <id>http://www.gregmefford.com/blog/2010/06/05/avr-meet-smart-card</id>
    <content type="html"><![CDATA[<p>As a part of my MS thesis research, I have a need to have precise control over an ACS ACOS5 Smart Card.
In this article, I will explain the code I have written to directly interface an Atmel ATtiny2313 microcontroller to an ACS ACOS5 cryptographic Smart Card.
Before developing this AVR C code, I experimented with various other methods of interfacing with a Smart Card at a low level, with varying amounts of success.
I will discuss some of the other methods in future articles, and outline how far I got with them and where there is still opportunity for improvement.</p>

<!-- more -->


<h2>Why a Microcontroller?</h2>

<p>My requirement was to have a simple, controllable interface to a Smart Card, with minimal cost as a design goal.
I started out trying to modify a commercial Smart Card reader to allow protocol analysis while under control of a computer.
While I was successful in modifying the reader to provide the physical interface, the API for getting low-level access to the card turned out to be difficult.
I decided that if I had to work with the PCSC API at the lowest level, I might as well just work from the card data sheet and implement as much of the protocol as I needed in C code for my $2 microcontroller.
This helped me to meet my controllability requirement by having full control over each byte transmitted and recieved between the card and the microcontroller.
It also helped me to meet a low-cost design goal by using a very inexpensive microcontroller instead of an expensive commercial reader that has been modified, plus a computer to drive it.</p>

<h2>Getting Started with an AVR</h2>

<p>To make prototyping simple, I bought a very helpful prototyping board for the Atmel ATtiny2313 microcontroller from <a href="http://www.evilmadscientist.com/article.php/card2313">Evil Mad Scientist</a>.
This board is great because it provides silk-screened labels of each IO pin function and plenty of plated through-holes for soldering interface wires and simple components like power supplies, filter capacitors, and resonators.
For connecting to a Smart Card, I picked up a Smart Card breakout board from <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=9440">SparkFun Electronics</a>.
This breakout board offers a stanrdard physical interface to slide in a Smart Card and access its pins on plated through-holes, into which I mounted a row of standard single in-line pins that I could use for breadboarding and wiring up to the microcontroller breakout board.</p>

<p>To get a nice stable clock to the microcontroller (and ultimately to the Smart Card), I populated a 20 MHz ceramic resonator in the resonator footprint on the microcontroller breakout board.
To make use of this external clock, I calculated the appropriate bits using the ATtiny2313 data sheet and programmed the fuse bits as follows:</p>

<figure class='code'><figcaption><span>Configuring ATtiny2313 to Use a 20 MHz External Resonator </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">lfuse</span> <span class="o">=</span> <span class="mh">0xAF</span>
</span><span class='line'><span class="n">hfuse</span> <span class="o">=</span> <span class="mh">0xDF</span>
</span><span class='line'><span class="n">efuse</span> <span class="o">=</span> <span class="mh">0xFF</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Generating a Smart Card Clock</h2>

<p>The first requirement of interfacing the microcontroller to a Smart Card is to provide the card with a stable clock between 1 MHz and 5 MHz.
Even though the data IO interface of the ACOS5 Smart Card is asynchronous, the card requires a continuous clock on the CLK pin in order to operate.
This was accomplished rather simply using the ATtiny2313&rsquo;s hardware PWM function.
The PWM generator in the ATtiny2313 offers a lot of advanced features, but to simply generate a clock at a given frequency and duty cycle, most of the more advanced options are not required.
To generate a 2 MHz clock with a 50% duty cycle, I used the following simple function, adapted from the example code given in the data sheet for using the PWM generator:</p>

<figure class='code'><figcaption><span>Generate a 2 MHz Clock with 50% Duty Cycle </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">init_PWM_CLK</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Generate a clock on OC0B pin.</span>
</span><span class='line'>  <span class="c1">// Compare Output Mode:</span>
</span><span class='line'>  <span class="n">TCCR0A</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">COM0B1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">COM0B0</span><span class="p">)</span> <span class="o">|</span> <span class="c1">// Toggle OC0B on Compare Match</span>
</span><span class='line'>           <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">WGM01</span><span class="p">)</span>  <span class="o">|</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">WGM00</span><span class="p">);</span>   <span class="c1">// Clear Timer on Compare Match</span>
</span><span class='line'>  <span class="n">TCCR0B</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">CS02</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">CS01</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">CS00</span><span class="p">);</span> <span class="c1">// IO CLK, no pre-scalar</span>
</span><span class='line'>  <span class="n">OCR0A</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// Freq. = 20MHz / 2*(1+ORC0A) = 2MHz</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also made sure the data direction of the <code>OC0B</code> pin is set to output, so the clock will not default to a high-impedance input:</p>

<figure class='code'><figcaption><span>Configure the OC0B Pin as an Output </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DDRD</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">DDD5</span><span class="p">);</span> <span class="c1">// OC0B output pin</span>
</span><span class='line'>    <span class="n">init_PWM_CLK</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Answer to Reset</h2>

<p>Now that we have a clock to drive the Smart Card, the next thing to do is to perform the appropriate power-up sequence to cause the card to reset.
When the card resets, it transmits an Answer To Reset (ATR) string.
This string of bytes is used by commercial readers to identify the specific card being interfaced with, and describes its capabilities.
In this case, I read the ATR with an oscilloscope just to make sure the card is properly resetting, but I do not need the AVR to do anything based on the ATR, since I know the capabilities of the ACOS5 card that I am using for my research.</p>

<p>Since I do not need to actually read the bytes of the ATR sequence, I just use the following start-up sequence:</p>

<figure class='code'><figcaption><span>Smart Card Start-Up Sequence </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// Power-up procedure</span>
</span><span class='line'>  <span class="n">set_vpp</span><span class="p">();</span>
</span><span class='line'>  <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">set_reset</span><span class="p">();</span>
</span><span class='line'>  <span class="n">init_USART_RX</span><span class="p">();</span>
</span><span class='line'>  <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">80</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>set_vpp</code> and <code>set_reset</code> functions are just convenience methods to set the respective output pins high for the <code>VPP</code> and <code>RESET</code> pads on the Smart Card.
The <code>init_USART_RX</code> function is used to configure the built-in Universal Sychronous and Asynchronous serial Receiver and Transmitter (USART), which will be described in more detail in the following section.</p>

<h2>Data IO with USART</h2>

<p>A Microcontroller is a powerful tool for this type of low-level system integration because these very inexpensive processors generally come with built-in hardware support for a wide variety of serial protocols like Pulse-Width Modulation (PWM), I2C, and SPI.
These can be implemented using the AVR&rsquo;s USART and Universial Serial Interface (USI) ports, which support varying word lengths, start bits, stop bits, parity-generation, and parity-checking.</p>

<h3>Configuring the USART Interface</h3>

<p>For simplicity, the USART is configured to communicate at the default 9600 bps defined in the Smart Card standard.
I believe that the ACOS5 is also capable of communicating at 125 kbps, but I have not yet worked out the command to get it into that mode.
Both Answer to Reset (ATR) and the following communications will take place at 9600 bps unless configured to do otherwise.</p>

<p>The code to configure the USART interface is straightforward from the data sheet:</p>

<figure class='code'><figcaption><span>Configure the USART to Communicate with the Smart Card </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="kt">void</span> <span class="nf">init_USART_9600</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Baud rate</span>
</span><span class='line'>    <span class="c1">// UBRR = f_osc/(16*baud) - 1</span>
</span><span class='line'>    <span class="c1">// For 9600Hz, UBRR ~= 129.2 = 20000000/(16*9600) - 1</span>
</span><span class='line'>    <span class="n">UBRRH</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UBRRL</span> <span class="o">=</span> <span class="mi">230</span><span class="p">;</span> <span class="c1">// 129 didn&#39;t look right on the oscilloscope. 230 works well.</span>
</span><span class='line'>    <span class="c1">// Set frame format: 8data, 1stop bit, even parity</span>
</span><span class='line'>    <span class="n">UCSRC</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">USBS</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&lt;&lt;</span> <span class="n">UCSZ0</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">UPM1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since a Smart Card only has a single IO pad, I implemented the AVR&rsquo;s transceiver interface by connecting the IO pad of the card to both the AVR&rsquo;s TX and RX pins.
The direction of data on the IO line can then be controlled by software by activating and deactivating the USART&rsquo;s transmit and receieve modes exclusively.
When in receive mode, both the TX and RX pin on the microcontroller become high-impedance inputs, allowing the Smart Card to transmit.
In transmit mode, the microcontroller drives the TX pin, sending data to the Smart Card.
The C code to configure receive and transmit modes is  straightforward, based on the example code provided in the data sheet.
Since the transmit and receive modes are both enabled in the same control register, setting one without setting the other implicitly disables the latter.
The only other notable thing is that the <code>TXC</code> bit should be set when entering transmit mode to prevent the USART hardware from transmitting whatever byte happens to be already in the transmit buffer.</p>

<p>The code is as follows:</p>

<figure class='code'><figcaption><span>Configuring the USART for Transmit and Receive Modes </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="kt">void</span> <span class="nf">init_USART_RX</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Enable receiver</span>
</span><span class='line'>    <span class="n">UCSRB</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">RXEN</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">init_USART_TX</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Enable transmitter and tell it the buffer is empty.</span>
</span><span class='line'>    <span class="n">UCSRB</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">TXEN</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">TXC</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Transmitting and Receiving Bytes</h3>

<p>The transmit and receive processes are also straightforward.
The only thing to keep in mind is that the actual USART hardware is asynchronous to the rest of the running code.
That is, once a byte is written to the output buffer, the code continues to execute while the byte is transmitted in the background at the specified baud rate.
To simplify the code structure and avoid using interrupt call-back routines, my code keeps itself sychronous by waiting for each transmitted character to be flushed from the buffer before proceeding.
Similarly, the code to receive a character blocks until a character is received.
In one sense, this is dangerous because it could wait forever if the card became unresponsive when the interface was expecing a byte.
In practice, this should not be much of a problem for me because my research will exercise the card in controlled and well-known routines.</p>

<p>The transmit and receive code is as follows:</p>

<figure class='code'><figcaption><span>Transmitting and Receiving Data with the USART</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="kt">void</span> <span class="nf">USART_TX</span><span class="p">(</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">byte</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Clear the TX Complete flag by writing a 1 to it</span>
</span><span class='line'>    <span class="n">UCSRA</span> <span class="o">=</span> <span class="n">UCSRA</span> <span class="o">|</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">TXC</span> <span class="p">);</span>
</span><span class='line'>    <span class="c1">// Wait until transmit buffer is ready</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="o">!</span><span class="p">(</span> <span class="n">UCSRA</span> <span class="o">&amp;</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">UDRE</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">;</span> <span class="c1">// Spin-lock</span>
</span><span class='line'>    <span class="c1">// Send the byte</span>
</span><span class='line'>    <span class="n">UDR</span> <span class="o">=</span> <span class="n">byte</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">USART_RX</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Wait until receive buffer is ready</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="o">!</span><span class="p">(</span> <span class="n">UCSRA</span> <span class="o">&amp;</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">RXC</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">;</span> <span class="c1">// Spin-lock</span>
</span><span class='line'>    <span class="c1">// Send the byte</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UDR</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
